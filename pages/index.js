import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import React, {useRef, useEffect, useState} from 'react'
import * as tf from '@tensorflow/tfjs'
import * as handpose from '@tensorflow-models/handpose'
import Webcam from 'react-webcam'



export default function Home() {
  const webcamRef = useRef(null)
  const canvasRef = useRef(null)
  const [handData, setHandData] = useState(null)

  const runHandPose = async () => {
    const net = await handpose.load({
      inputResolution:{width:640, height:480}, 
      scale:.5
    })

    // console.log('net')

    setInterval(() => {
      detectHand(net)
    }, 500)
  }


  const detectHand = async (net) => {
    if (
      typeof webcamRef.current !=='undefined' && 
      webcamRef.current !== null && 
      webcamRef.current.video.readyState === 4
      ) {
        const video = webcamRef.current.video
        const videoWidth = webcamRef.current.video.videoWidth
        const videoHeight = webcamRef.current.video.videoHeight

        webcamRef.current.video.width = videoWidth
        webcamRef.current.video.height = videoHeight

        canvasRef.current.width = videoWidth
        canvasRef.current.height = videoHeight

        // console.log(net.estimateHands(video))
        const hand = await net.estimateHands(video)
        if (hand[0]) {
          setHandData(hand[0])
        } else {
          setHandData(null)
        }

        console.log(hand[0])




        const ctx = canvasRef.current.getContext("2d")

  
        drawHand(hand, ctx)
      }






  }

  useEffect(() => {
    runHandPose()
  }, [])



  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Webcam ref={webcamRef} style={
            {
                position: 'absolute',
                marginLeft: 'auto',
                marginRight: 'auto',
                left: 0,
                right: 0,
                textAlign: 'center',
                zIndex:9,
                width: 640,
                height: 480,
            }
          }/>
        <canvas ref={canvasRef} style={
         {
            position: 'absolute',
            marginLeft: 'auto',
            marginRight: 'auto',
            left: 0,
            right: 0,
            textAlign: 'center',
            zIndex:9,
            width: 640,
            height: 480,
          }
        }/>
        {
          handData &&
        // <h1>finger position is {typeof handData.annotations.indexFinger[0][0]}</h1>
        <h1>finger position is {Math.round(handData.annotations.indexFinger[0][0])}</h1>
        }

    </div>
  )
}
